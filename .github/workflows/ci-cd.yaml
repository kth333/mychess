name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - frontend-test
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest


    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Build React Application
        working-directory: frontend
        run: |
          CI=false npm run build

      # Uncomment if you have frontend tests
      # - name: Run Frontend Tests
      #   working-directory: frontend
      #   run: npm test -- --watchAll=false

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          java-package: 'jdk'
          check-latest: false

      - name: Set executable permission for mvnw
        run: chmod +x ./mvnw

      - name: Build and Test Spring Boot Services (All Microservices)
        run: ./mvnw clean package

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up .env file
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> .env

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Images
        run: docker-compose build
      
      - name: Push Docker Images
        run: docker-compose push


  # Job 4: Deploy Backend Services
  deploy-backend:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy Auth Service
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_AUTH_SERVICE_DNS }} "
          docker pull ppv1/auth-service:latest &&
          docker stop auth-service || true &&
          docker rm auth-service || true &&
          docker run -d --name auth-service -p 8080:8080 --env-file /home/ec2-user/.env ppv1/auth-service:latest --spring.profiles.active=docker
          "

      - name: Deploy Admin Service
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_ADMIN_SERVICE_DNS }} "
          docker pull ppv1/admin-service:latest &&
          docker stop admin-service || true &&
          docker rm admin-service || true &&
          docker run -d --name admin-service -p 8084:8084 --env-file /home/ec2-user/.env ppv1/admin-service:latest --spring.profiles.active=docker
          "
      - name: Deploy Player Service
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_PLAYER_SERVICE_DNS }} "
          docker pull ppv1/player-service:latest &&
          docker stop player-service || true &&
          docker rm player-service || true &&
          docker run -d --name player-service -p 8081:8081 --env-file /home/ec2-user/.env ppv1/player-service:latest --spring.profiles.active=docker
          "
      - name: Deploy Email Service
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_EMAIL_SERVICE_DNS }} "
          docker pull ppv1/email-service:latest &&
          docker stop email-service || true &&
          docker rm email-service || true &&
          docker run -d --name email-service -p 8085:8085 --env-file /home/ec2-user/.env ppv1/email-service:latest --spring.profiles.active=docker
          "
      - name: Deploy Tournament Service
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_TOURNAMENT_SERVICE_DNS }} "
          docker pull ppv1/tournament-service:latest &&
          docker stop tournament-service || true &&
          docker rm tournament-service || true &&
          docker run -d --name tournament-service -p 8083:8083 --env-file /home/ec2-user/.env ppv1/tournament-service:latest --spring.profiles.active=docker
          "

      - name: Deploy Match Service
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_MATCH_SERVICE_DNS }} "
          docker pull ppv1/match-service:latest &&
          docker stop match-service || true &&
          docker rm match-service || true &&
          docker run -d --name match-service -p 8082:8082 --env-file /home/ec2-user/.env ppv1/match-service:latest --spring.profiles.active=docker
          "

  # Job 5: Deploy Frontend
  deploy-frontend:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy Frontend
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_FRONTEND_DNS }} "
          docker pull ppv1/frontend:latest &&
          docker stop frontend || true &&
          docker rm frontend || true &&
          docker run -d --name frontend -p 80:80  ppv1/frontend:latest
          "
