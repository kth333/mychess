name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - deployment
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      skip_backend:
        description: 'Skip Backend Build and Deploy Steps'
        required: false
        default: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      FULLCHAIN_PEM: ${{ secrets.FULLCHAIN_PEM }}
      PRIVKEY_PEM: ${{ secrets.PRIVKEY_PEM }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Full Docker Cleanup
        run: |
          docker container stop $(docker container ls -aq) || true
          docker container rm $(docker container ls -aq) || true
          docker image rm $(docker images -q) || true
          docker volume rm $(docker volume ls -q) || true
          docker system prune -f --volumes

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm install

      - name: Build React Application
        working-directory: frontend
        run: |
          CI=false npm run build

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          java-package: 'jdk'
          check-latest: false

      - name: Set executable permission for mvnw
        run: chmod +x ./mvnw

      - name: Build and Test Spring Boot Services (All Microservices)
        if: ${{ inputs.skip_backend != 'true' }} # Conditionally skip backend build
        run: ./mvnw clean package

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Set up .env file
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> .env

      - name: Copy Certificate Files into Each Service Directory
        run: |
          echo "${{ secrets.FULLCHAIN_PEM }}" | base64 --decode > fullchain.pem
          echo "${{ secrets.PRIVKEY_PEM }}" | base64 --decode > privkey.pem
          mkdir -p ./nginx/certs
          mv fullchain.pem privkey.pem ./nginx/certs/

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Backend Docker Images
        if: ${{ inputs.skip_backend != 'true' }} # Skip backend docker build conditionally
        run: |
          docker-compose build auth-service tournament-service match-service email-service player-service admin-service
          docker-compose push auth-service tournament-service match-service email-service player-service admin-service

      - name: Build and Push Frontend Docker Image
        run: |
          docker-compose build frontend
          docker-compose push frontend

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up SSH Key for Deployment
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Deploy Services on EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem ec2-user@${{ secrets.EC2_INSTANCE_DNS }} "
            docker-compose down &&
            docker-compose pull &&
            docker-compose up -d
          "