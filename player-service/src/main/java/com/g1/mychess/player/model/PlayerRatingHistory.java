package com.g1.mychess.player.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;

import java.time.LocalDateTime;

/**
 * Represents the historical ratings of a player using the Glicko rating system.
 * Each record captures the Glicko rating, rating deviation, and volatility of a player
 * at a specific point in time.
 */
@Entity
@Table(name = "player_rating_history")
public class PlayerRatingHistory {

    /**
     * The unique identifier for the rating history record.
     * Auto-generated by the persistence provider.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The player associated with this rating history record.
     * A player can have multiple historical ratings.
     */
    @NotNull
    @ManyToOne
    @JoinColumn(name = "player_id", nullable = false)
    private Player player;

    /**
     * The Glicko rating of the player.
     */
    @Column(name = "glicko_rating", nullable = false)
    private double glickoRating;

    /**
     * The rating deviation, representing the confidence in the player's rating.
     */
    @Column(name = "rating_deviation", nullable = false)
    private double ratingDeviation;

    /**
     * The volatility of the player's rating, indicating the predictability of their performance.
     */
    @Column(name = "volatility", nullable = false)
    private double volatility;

    /**
     * The date and time when this rating was recorded.
     */
    @NotNull
    @Column(name = "date", nullable = false)
    private LocalDateTime date;

    /**
     * Default constructor required by JPA.
     */
    public PlayerRatingHistory() {
    }

    /**
     * Constructs a new PlayerRatingHistory record with the specified parameters.
     *
     * @param player          The player associated with this record.
     * @param glickoRating    The Glicko rating of the player.
     * @param ratingDeviation The rating deviation of the player's rating.
     * @param volatility      The volatility of the player's rating.
     * @param now             The date and time when this rating was recorded.
     */
    public PlayerRatingHistory(Player player, double glickoRating, double ratingDeviation, double volatility, LocalDateTime now) {
        this.player = player;
        this.glickoRating = glickoRating;
        this.ratingDeviation = ratingDeviation;
        this.volatility = volatility;
        this.date = now;
    }

    /**
     * Gets the unique identifier for this record.
     *
     * @return The unique identifier.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the unique identifier for this record.
     *
     * @param id The unique identifier.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the player associated with this record.
     *
     * @return The associated player.
     */
    public Player getPlayer() {
        return player;
    }

    /**
     * Sets the player associated with this record.
     *
     * @param player The associated player.
     */
    public void setPlayer(Player player) {
        this.player = player;
    }

    /**
     * Gets the Glicko rating of the player.
     *
     * @return The Glicko rating.
     */
    public double getGlickoRating() {
        return glickoRating;
    }

    /**
     * Sets the Glicko rating of the player.
     *
     * @param glickoRating The Glicko rating.
     */
    public void setGlickoRating(double glickoRating) {
        this.glickoRating = glickoRating;
    }

    /**
     * Gets the rating deviation of the player's rating.
     *
     * @return The rating deviation.
     */
    public double getRatingDeviation() {
        return ratingDeviation;
    }

    /**
     * Sets the rating deviation of the player's rating.
     *
     * @param ratingDeviation The rating deviation.
     */
    public void setRatingDeviation(double ratingDeviation) {
        this.ratingDeviation = ratingDeviation;
    }

    /**
     * Gets the volatility of the player's rating.
     *
     * @return The volatility.
     */
    public double getVolatility() {
        return volatility;
    }

    /**
     * Sets the volatility of the player's rating.
     *
     * @param volatility The volatility.
     */
    public void setVolatility(double volatility) {
        this.volatility = volatility;
    }

    /**
     * Gets the date and time when this rating was recorded.
     *
     * @return The date and time.
     */
    public LocalDateTime getDate() {
        return date;
    }

    /**
     * Sets the date and time when this rating was recorded.
     *
     * @param date The date and time.
     */
    public void setDate(LocalDateTime date) {
        this.date = date;
    }
}